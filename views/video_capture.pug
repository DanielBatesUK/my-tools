doctype html
html(lang='en')
  include head.pug
  +head("Video Capture", "television-classic.png")
  style.
    html,
    body {
      margin: 0;
      border: 0;
      padding: 0;
      background-color: #101010;
      background-image: none;
      font-size: 0.75rem;
    }
    body {
      overflow: hidden;
    }
    #container {
      margin: 0px auto;
      overflow: hidden;
      width: 100vw;
      height: 100vh;
    }

    #video-player {
      width: 100vw;
      height: 100vh;
      background-color: #101010;
    }

    #settings-button {
      display: block;
      position: absolute;
      top: 1rem;
      left: 1rem;
      width: 3rem;
      height: 3rem;
      margin: 0;
      border: 0;
      padding: 0;
      opacity: 0;
      color: #ffffff;
      z-index: 2;
      transition: all 1s;
    }

    #settings-button svg {
      height: 100%;
      width: 100%;
    }
    #settings-button:hover {
      cursor: pointer;
      opacity: 1;
    }

    #controls {
      display: none;
      position: absolute;
      top: 1rem;
      left: 5rem;
      width: auto;
      max-height: calc(100% - 2rem);
      overflow: auto;
      margin: 0 5rem 1rem 0;
      z-index: 2;
      opacity: 0;
      transition: all 0.25s;
    }
  body 
    meta(name='theme-color', content='#101010')
    #container
      video#video-player(autoplay='true')
    #settings-button
      svg(xmlns='http://www.w3.org/2000/svg', viewBox='0 0 24 24')
        g
          path(
            fill='currentColor',
            d='M19.14,12.94c0.04-0.3,0.06-0.61,0.06-0.94c0-0.32-0.02-0.64-0.07-0.94l2.03-1.58c0.18-0.14,0.23-0.41,0.12-0.61 l-1.92-3.32c-0.12-0.22-0.37-0.29-0.59-0.22l-2.39,0.96c-0.5-0.38-1.03-0.7-1.62-0.94L14.4,2.81c-0.04-0.24-0.24-0.41-0.48-0.41 h-3.84c-0.24,0-0.43,0.17-0.47,0.41L9.25,5.35C8.66,5.59,8.12,5.92,7.63,6.29L5.24,5.33c-0.22-0.08-0.47,0-0.59,0.22L2.74,8.87 C2.62,9.08,2.66,9.34,2.86,9.48l2.03,1.58C4.84,11.36,4.8,11.69,4.8,12s0.02,0.64,0.07,0.94l-2.03,1.58 c-0.18,0.14-0.23,0.41-0.12,0.61l1.92,3.32c0.12,0.22,0.37,0.29,0.59,0.22l2.39-0.96c0.5,0.38,1.03,0.7,1.62,0.94l0.36,2.54 c0.05,0.24,0.24,0.41,0.48,0.41h3.84c0.24,0,0.44-0.17,0.47-0.41l0.36-2.54c0.59-0.24,1.13-0.56,1.62-0.94l2.39,0.96 c0.22,0.08,0.47,0,0.59-0.22l1.92-3.32c0.12-0.22,0.07-0.47-0.12-0.61L19.14,12.94z M12,15.6c-1.98,0-3.6-1.62-3.6-3.6 s1.62-3.6,3.6-3.6s3.6,1.62,3.6,3.6S13.98,15.6,12,15.6z'
          )
    #controls.page
      h1 Video Capture Settings
      h3 Video Settings
        small current window resolution
          span#window-size unknown
      .inline-block
        h3 Video device
        label Video device:
        select#videoinput(name='videoinput')
      .inline-block
        h3 Resolution
        input#vh2160(type='radio', name='vh', value='2160', onclick='controlsChange();')
        label(for='vh2160') 4K
        input#vh1080(type='radio', name='vh', value='1080', onclick='controlsChange();')
        label(for='vh1080') 1080p
        input#vh720(type='radio', name='vh', value='720', onclick='controlsChange();')
        label(for='vh720') 720p
        input#vh480(type='radio', name='vh', value='480', onclick='controlsChange();')
        label(for='vh480') 480p
      .inline-block
        h3 Frames per second
        input#vf120(type='radio', name='vf', value='120', onclick='controlsChange();')
        label(for='vf120') 120
        input#vf60(type='radio', name='vf', value='60', onclick='controlsChange();')
        label(for='vf60') 60
        input#vf50(type='radio', name='vf', value='50', onclick='controlsChange();')
        label(for='vf50') 50
        input#vf30(type='radio', name='vf', value='30', onclick='controlsChange();')
        label(for='vf30') 30
        input#vf25(type='radio', name='vf', value='25', onclick='controlsChange();')
        label(for='vf25') 25
        input#vf24(type='radio', name='vf', value='24', onclick='controlsChange();')
        label(for='vf24') 24
      .inline-block
        h3 Brightness, Constrast &amp; Saturation
        label(for='vb') Brightness
        input#vb(type='range', name='vb', min='-127', max='127', value='0', onclick='controlsChange();')
        label(for='vc') Contrast
        input#vc(type='range', name='vc', min='-0', max='255', value='0', onclick='controlsChange();')
        label(for='vs') Saturation
        input#vs(type='range', name='vs', min='-0', max='255', value='0', onclick='controlsChange();')
      h3 Audio settings
      .inline-block
        h3 Audio device
        label Audio device:
        select#audioinput(name='audioinput')
      .inline-block
        h3 Channels
        input#ac1(type='radio', name='ac', value='1', onclick='controlsChange();')
        label(for='ac1') 1 Channel
        input#ac2(type='radio', name='ac', value='2', onclick='controlsChange();')
        label(for='ac2') 2 Channels
      .inline-block
        h3 Sample size
        input#as32(type='radio', name='as', value='32', onclick='controlsChange();')
        label(for='as32') 32bit
        input#as24(type='radio', name='as', value='24', onclick='controlsChange();')
        label(for='as24') 24bit
        input#as16(type='radio', name='as', value='16', onclick='controlsChange();')
        label(for='as16') 16bit
        input#as8(type='radio', name='as', value='8', onclick='controlsChange();')
        label(for='as8') 8bit
      .inline-block
        h3 Sample rate
        input#ar192000(type='radio', name='ar', value='192000', onclick='controlsChange();')
        label(for='ar192000') 192,000Hz
        input#ar96000(type='radio', name='ar', value='96000', onclick='controlsChange();')
        label(for='ar96000') 96,000Hz
        input#ar88200(type='radio', name='ar', value='88200', onclick='controlsChange();')
        label(for='ar88200') 88,200Hz
        input#ar48000(type='radio', name='ar', value='48000', onclick='controlsChange();')
        label(for='ar48000') 48,000Hz
        input#ar44100(type='radio', name='ar', value='44100', onclick='controlsChange();')
        label(for='ar44100') 44,100Hz
      h3 URL
      .block(style='max-width: 50%')
        p#url(style='overflow-wrap: anywhere') URL goes here
      input(type='button', value='Copy URL', onclick='navigator.clipboard.writeText(document.getElementById(\'url\').textContent);')
      input(type='button', value='Goto URL', onclick='window.location.href = document.getElementById(\'url\').textContent;')
    script.
      // Variables
      let video = document.querySelector('#video-player');
      let tracks;
      let mediaDevicesObject = {};
      let parametersObject = {};
      let settingsTimeout;
      const vResolutions = { 2160: 3840, 1080: 1920, 720: 1280, 480: 640 };
      const urlParams = Object.fromEntries(new URLSearchParams(location.search));
      console.log('urlParams', urlParams);

      // Get media devices
      async function getMediaDevices() {
        try {
          console.log('Setting mediaDevicesObject...');
          const fetchedDevices = await navigator.mediaDevices.enumerateDevices();
          fetchedDevices
            .filter((obj) => obj.kind === 'audioinput' || obj.kind === 'videoinput')
            .forEach((device) => {
              mediaDevicesObject[device.label] = { kind: device.kind, id: device.deviceId, label: device.label };
            });
          console.log('mediaDevicesObject', mediaDevicesObject);
        } catch (error) {
          console.error(error);
        }
      }

      // Set media devices to controls
      function setMediaDevicesControls() {
        try {
          console.log('Setting media device controls...');
          Object.keys(mediaDevicesObject).forEach((key) => {
            // Adding option to selects
            console.log(`Adding '${mediaDevicesObject[key].label}' device to '${mediaDevicesObject[key].kind}' controls.`);
            const select = document.getElementById(mediaDevicesObject[key].kind);
            const option = document.createElement('option');
            option.text = mediaDevicesObject[key].label;
            option.value = mediaDevicesObject[key].label;
            select.appendChild(option);
          });
        } catch (error) {
          console.error(error);
        }
      }

      // Get parameters from url or set default
      function setParameters() {
        try {
          console.log('Setting parameters...');
          parametersObject = {
            a: urlParams.a ? urlParams.a : document.getElementById('audioinput').options[0].innerText,
            ac: urlParams.ac ? Number(urlParams.ac) : 2,
            as: urlParams.as ? Number(urlParams.as) : 16,
            ar: urlParams.ar ? Number(urlParams.ar) : 44100,
            v: urlParams.v ? urlParams.v : document.getElementById('videoinput').options[0].innerText,
            vw: urlParams.vw ? Number(urlParams.vw) : 1280,
            vh: urlParams.vh ? Number(urlParams.vh) : 720,
            vf: urlParams.vf ? Number(urlParams.vf) : 30,
            vb: urlParams.vb ? Number(urlParams.vb) : 0,
            vc: urlParams.vc ? Number(urlParams.vc) : 128,
            vs: urlParams.vs ? Number(urlParams.vs) : 128,
          };
          console.log('parametersObject', parametersObject);
        } catch (error) {
          console.error(error);
        }
      }

      // Setting controls to reflect parameters
      function setControls() {
        try {
          console.log('Setting controls...');
          // Audio controls
          document.getElementById('audioinput').value = parametersObject.a;
          document.getElementById(`ac${parametersObject.ac}`).checked = true;
          document.getElementById(`as${parametersObject.as}`).checked = true;
          document.getElementById(`ar${parametersObject.ar}`).checked = true;
          // Video controls
          document.getElementById('videoinput').value = parametersObject.v;
          document.getElementById(`vh${parametersObject.vh}`).checked = true;
          document.getElementById(`vf${parametersObject.vf}`).checked = true;
          document.getElementById(`vb`).value = parametersObject.vb;
          document.getElementById(`vc`).value = parametersObject.vc;
          document.getElementById(`vs`).value = parametersObject.vs;
          console.log('Completed setting controls.');
        } catch (error) {
          console.error(error);
        }
      }

      // Set controls URL to reflect parameters
      function setControlsURL() {
        try {
          console.log('Setting controls URL...');
          const controlsURL = `${window.location.protocol}//${window.location.hostname}${window.location.pathname}?a=${encodeURIComponent(parametersObject.a)}&ac=${parametersObject.ac}&as=${parametersObject.as}&ar=${parametersObject.ar}&v=${encodeURIComponent(parametersObject.v)}&vw=${parametersObject.vw}&vh=${parametersObject.vh}&vf=${parametersObject.vf}&vb=${parametersObject.vb}&vc=${parametersObject.vc}&vs=${parametersObject.vs}`;
          document.getElementById('url').textContent = controlsURL;
          console.log('controlsURL', controlsURL);
        } catch (error) {
          console.error(error);
        }
      }

      // Set controls current window resolution
      function setControlsWindowResolution() {
        document.getElementById('window-size').textContent = `${document.getElementById('video-player').clientWidth}x${document.getElementById('video-player').clientHeight}`;
      }
      window.onresize = setControlsWindowResolution;

      // Stop media stream if playing
      async function stopMediaStream() {
        try {
          console.log('Stopping media stream...');
          if (typeof tracks !== 'undefined') {
            tracks.forEach((track) => {
              track.stop();
            });
            video.srcObject = null;
            console.log('Media stream stopped.');
          } else {
            console.log('No media stream playing.');
          }
        } catch (error) {
          console.error(error);
        }
      }

      // Start media stream
      async function startMediaStream() {
        try {
          await stopMediaStream();
          console.log('Starting media stream...');
          const constraints = {
            audio: {
              deviceId: {
                exact: mediaDevicesObject[parametersObject.a].id,
              },
              channelCount: {exact : parametersObject.ac},
              sampleSize: {exact: parametersObject.as},
              sampleRate: {exact: parametersObject.ar},
              echoCancellation: false,
              noiseSuppression: false,
              autoGainControl: true,
            },
            video: {
              deviceId: {
                exact: mediaDevicesObject[parametersObject.v].id,
              },
              width: {exact: parametersObject.vw},
              height: {exact: parametersObject.vh},
              frameRate: {exact: parametersObject.vf},
              brightness: {exact: parametersObject.vb},
              contrast: {exact: parametersObject.vc},
              saturation: {exact: parametersObject.vs},
            },
          };
          console.log('constraints', constraints);
          stream = await navigator.mediaDevices.getUserMedia(constraints);
          video.srcObject = stream;
          tracks = await stream.getTracks();
          await tracks[1].applyConstraints({brightness:constraints.video.brightness, contrast:constraints.video.contrast, saturation:constraints.video.saturation});
          document.title = `Video Capture - ${mediaDevicesObject[parametersObject.v]['label']} - ${parametersObject.vw}x${parametersObject.vh} ${parametersObject.vf}fps`;
          console.log('mediaDevices - getSupportedConstraints()', navigator.mediaDevices.getSupportedConstraints());
          console.log('audio - tracks', tracks[0]);
          console.log('video - tracks', tracks[1]);          
          console.log('audio - getCapabilities()', tracks[0].getCapabilities());
          console.log('video - getCapabilities()', tracks[1].getCapabilities());          
          console.log('audio - getSettings()', tracks[0].getSettings());
          console.log('video - getSettings()', tracks[1].getSettings());

        } catch (error) {
          console.error(error);
          document.title = 'Video Capture - Error';
        }
      }

      // Read controls and set parameters
      function readControls() {
        try {
          console.log('Reading controls and setting parameters...');
          parametersObject = {
            a: document.getElementById('audioinput').value,
            ac: Number(document.querySelector('input[name="ac"]:checked').value),
            as: Number(document.querySelector('input[name="as"]:checked').value),
            ar: Number(document.querySelector('input[name="ar"]:checked').value),
            v: document.getElementById('videoinput').value,
            vw: vResolutions[document.querySelector('input[name="vh"]:checked').value],
            vh: Number(document.querySelector('input[name="vh"]:checked').value),
            vf: Number(document.querySelector('input[name="vf"]:checked').value),
            vb: Number(document.getElementById('vb').value),
            vc: Number(document.getElementById('vc').value),
            vs: Number(document.getElementById('vs').value),
          };
          console.log('parametersObject', parametersObject);
        } catch (error) {
          console.error(error);
        }
      }

      // Controls changed so update stream
      async function controlsChange() {
        try {
          console.log('Controls change updating stream...');
          await readControls();
          await setControlsURL();
          await startMediaStream();
        } catch (error) {
          console.error(error);
        }
      }

      // Start script
      (async () => {
        await getMediaDevices();
        await setMediaDevicesControls();
        await setParameters();
        await setControls();
        await setControlsURL();
        await setControlsWindowResolution();
        await startMediaStream();
      })();

      // Settings button on/off/low
      function settingsButtonDisplay(state) {
        switch (state) {
          case 'on': // Button on
            document.getElementById('settings-button').style.opacity = 1;
            document.body.style.cursor = 'default';
            settingsButtonTimeout(false);
            break;
          case 'low': // Button low
            document.getElementById('settings-button').style.opacity = 0.33;
            document.body.style.cursor = 'default';
            settingsButtonTimeout(true);
            break;
          default: // Button off
            document.getElementById('settings-button').style.opacity = 0;
            document.body.style.cursor = 'none';
            settingsButtonTimeout(false);
        }
      }

      // Controls window open/close
      function controlsDisplay(state) {
        if (state === 'off') {
          // Close controls window
          document.getElementById('controls').style.display = 'none';
          document.getElementById('controls').style.opacity = 0;
        }
        if (state === 'on') {
          // Update change for audio and video select controls
          document.getElementById('audioinput').onchange = controlsChange;
          document.getElementById('videoinput').onchange = controlsChange;
          // Open controls window
          document.getElementById('controls').style.display = 'block';
          document.getElementById('controls').style.opacity = 1;
        }
      }

      // Settings button timeout
      function settingsButtonTimeout(state) {
        if (state === true) {
          // Timeout on
          clearTimeout(settingsTimeout);
          settingsTimeout = setTimeout(() => {
            if (document.getElementById('settings-button').style.opacity !== '1') {
              settingsButtonDisplay('off');
            } else {
              settingsButtonTimeout(true);
            }
          }, 3000);
        } else {
          // Cancel timeout
          clearTimeout(settingsTimeout);
        }
      }

      // Move mouse
      document.body.addEventListener('mousemove', (e) => {
        if (document.getElementById('settings-button').style.opacity !== '1') {
          settingsButtonTimeout(true);
          settingsButtonDisplay('low');
        } else {
          settingsButtonTimeout(false);
        }
      });

      // Settings-button mouse over
      document.getElementById('settings-button').addEventListener('mouseover', (e) => {
        settingsButtonDisplay('on');
      });

      // Settings-button mouse out
      document.getElementById('settings-button').addEventListener('mouseout', (e) => {
        if (document.getElementById('controls').style.display !== 'block') settingsButtonDisplay('low');
      });

      // Settings-button click
      document.getElementById('settings-button').addEventListener('click', (e) => {
        if (document.getElementById('controls').style.display !== 'block') {
          settingsButtonDisplay('on');
          controlsDisplay('on');
        } else {
          settingsButtonDisplay('off');
          controlsDisplay('off');
        }
      });

      // Video-player close controls if open
      document.getElementById('video-player').addEventListener('click', (e) => {
        if (document.getElementById('controls').style.display === 'block') {
          settingsButtonDisplay('off');
          controlsDisplay('off');
        }
      });
